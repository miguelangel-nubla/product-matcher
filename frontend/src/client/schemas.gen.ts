// This file is auto-generated by @hey-api/openapi-ts

export const BackendInfoSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        }
    },
    type: 'object',
    required: ['name', 'description'],
    title: 'BackendInfo'
} as const;

export const Body_login_login_access_tokenSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login-login_access_token'
} as const;

export const DebugStepSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        timestamp: {
            type: 'number',
            title: 'Timestamp'
        },
        data: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        }
    },
    type: 'object',
    required: ['message', 'timestamp'],
    title: 'DebugStep'
} as const;

export const GlobalSettingsSchema = {
    properties: {
        default_threshold: {
            type: 'number',
            title: 'Default Threshold'
        },
        max_candidates: {
            type: 'integer',
            title: 'Max Candidates'
        }
    },
    type: 'object',
    required: ['default_threshold', 'max_candidates'],
    title: 'GlobalSettings'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const MatchCandidateSchema = {
    properties: {
        product_id: {
            type: 'string',
            title: 'Product Id'
        },
        confidence: {
            type: 'number',
            title: 'Confidence'
        }
    },
    type: 'object',
    required: ['product_id', 'confidence'],
    title: 'MatchCandidate'
} as const;

export const MatchRequestSchema = {
    properties: {
        text: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Text'
        },
        threshold: {
            anyOf: [
                {
                    type: 'number',
                    maximum: 1,
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Threshold'
        },
        backend: {
            type: 'string',
            maxLength: 50,
            minLength: 1,
            title: 'Backend'
        },
        create_pending: {
            type: 'boolean',
            title: 'Create Pending',
            default: true
        }
    },
    type: 'object',
    required: ['text', 'backend'],
    title: 'MatchRequest'
} as const;

export const MatchResultSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        normalized_input: {
            type: 'string',
            title: 'Normalized Input'
        },
        pending_query_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pending Query Id'
        },
        candidates: {
            items: {
                '$ref': '#/components/schemas/MatchCandidate'
            },
            type: 'array',
            title: 'Candidates',
            default: []
        },
        debug_info: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MatchingDebugInfo'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['success', 'normalized_input'],
    title: 'MatchResult'
} as const;

export const MatchingDebugInfoSchema = {
    properties: {
        steps: {
            items: {
                '$ref': '#/components/schemas/DebugStep'
            },
            type: 'array',
            title: 'Steps'
        },
        start_time: {
            type: 'number',
            title: 'Start Time'
        }
    },
    type: 'object',
    required: ['steps', 'start_time'],
    title: 'MatchingDebugInfo'
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message'
} as const;

export const NewPasswordSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['token', 'new_password'],
    title: 'NewPassword'
} as const;

export const PendingQueriesPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/PendingQueryPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'PendingQueriesPublic'
} as const;

export const PendingQueryPublicSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        original_text: {
            type: 'string',
            title: 'Original Text'
        },
        normalized_text: {
            type: 'string',
            title: 'Normalized Text'
        },
        candidates: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Candidates'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        backend: {
            type: 'string',
            title: 'Backend'
        },
        created_at: {
            type: 'string',
            title: 'Created At'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        }
    },
    type: 'object',
    required: ['id', 'original_text', 'normalized_text', 'candidates', 'status', 'backend', 'created_at', 'owner_id'],
    title: 'PendingQueryPublic'
} as const;

export const PrivateUserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        full_name: {
            type: 'string',
            title: 'Full Name'
        },
        is_verified: {
            type: 'boolean',
            title: 'Is Verified',
            default: false
        }
    },
    type: 'object',
    required: ['email', 'password', 'full_name'],
    title: 'PrivateUserCreate'
} as const;

export const ResolveRequestSchema = {
    properties: {
        pending_query_id: {
            type: 'string',
            format: 'uuid',
            title: 'Pending Query Id'
        },
        action: {
            type: 'string',
            title: 'Action'
        },
        product_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Product Id'
        },
        custom_alias: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Custom Alias'
        }
    },
    type: 'object',
    required: ['pending_query_id', 'action'],
    title: 'ResolveRequest'
} as const;

export const TokenSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'Token'
} as const;

export const UpdatePasswordSchema = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Current Password'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword'
} as const;

export const UserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate'
} as const;

export const UserPublicSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['email', 'id'],
    title: 'UserPublic'
} as const;

export const UserRegisterSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserRegister'
} as const;

export const UserUpdateSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 40,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        }
    },
    type: 'object',
    title: 'UserUpdate'
} as const;

export const UserUpdateMeSchema = {
    properties: {
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    title: 'UserUpdateMe'
} as const;

export const UsersPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'UsersPublic'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;