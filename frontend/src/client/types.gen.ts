// This file is auto-generated by @hey-api/openapi-ts

export type BackendInfo = {
    name: string;
    description: string;
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type DebugStep = {
    message: string;
    timestamp: number;
    data?: (string | null);
};

export type GlobalSettings = {
    default_threshold: number;
    max_candidates: number;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type MatchCandidate = {
    product_id: string;
    confidence: number;
};

export type MatchingDebugInfo = {
    steps: Array<DebugStep>;
    start_time: number;
};

export type MatchLogPublic = {
    id: string;
    original_text: string;
    normalized_text: string;
    language: string;
    matched_product_id: string;
    matched_text: string;
    confidence_score: number;
    threshold_used: number;
    created_at: string;
    owner_id: string;
};

export type MatchLogsPublic = {
    data: Array<MatchLogPublic>;
    count: number;
};

export type MatchRequest = {
    text: string;
    threshold?: (number | null);
    backend: string;
    create_pending?: boolean;
};

export type MatchResult = {
    success: boolean;
    normalized_input: string;
    pending_query_id?: (string | null);
    candidates?: Array<MatchCandidate>;
    debug_info?: (MatchingDebugInfo | null);
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PendingQueriesPublic = {
    data: Array<PendingQueryPublic>;
    count: number;
};

export type PendingQueryPublic = {
    id: string;
    original_text: string;
    normalized_text: string;
    candidates: (string | null);
    status: string;
    backend: string;
    created_at: string;
    owner_id: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type ResolveRequest = {
    pending_query_id: string;
    action: string;
    product_id?: (string | null);
    custom_alias?: (string | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type BackendsGetProductUrlData = {
    backend: string;
    productId: string;
};

export type BackendsGetProductUrlResponse = (unknown);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type MatchingMatchProductData = {
    requestBody: MatchRequest;
};

export type MatchingMatchProductResponse = (MatchResult);

export type MatchingGetPendingQueriesData = {
    limit?: number;
    skip?: number;
    status?: string;
};

export type MatchingGetPendingQueriesResponse = (PendingQueriesPublic);

export type MatchingResolvePendingQueryData = {
    requestBody: ResolveRequest;
};

export type MatchingResolvePendingQueryResponse = (Message);

export type MatchingDeletePendingQueryData = {
    pendingQueryId: string;
};

export type MatchingDeletePendingQueryResponse = (Message);

export type MatchingGetExternalProductsData = {
    backend: string;
};

export type MatchingGetExternalProductsResponse = (unknown);

export type MatchingGetAvailableBackendsResponse = (Array<BackendInfo>);

export type MatchingGetAvailableLanguagesResponse = (unknown);

export type MatchingGetMatchingStatsData = {
    backend: string;
};

export type MatchingGetMatchingStatsResponse = (unknown);

export type MatchingGetMatchingSettingsResponse = (GlobalSettings);

export type MatchingGetMatchLogsData = {
    limit?: number;
    skip?: number;
};

export type MatchingGetMatchLogsResponse = (MatchLogsPublic);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);