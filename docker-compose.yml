# Simple deployment with published Docker images
# REQUIRED: Create backend/app/config/user/backends.yaml from backends.example.yaml
services:
  db:
    image: postgres:17
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata

  prestart:
    image: ghcr.io/miguelangel-nubla/product-matcher-backend:latest
    volumes:
      - ./backend/app/config/user:/app/app/config/user
    depends_on:
      db:
        condition: service_healthy
        restart: true
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
    command: bash scripts/prestart.sh

  backend:
    image: ghcr.io/miguelangel-nubla/product-matcher-backend:latest
    restart: always
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    volumes:
      - ./backend/app/config/user:/app/app/config/user
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    image: ghcr.io/miguelangel-nubla/product-matcher-frontend:latest
    restart: always
    ports:
      - "3000:80"
    env_file:
      - .env


volumes:
  app-db-data:
